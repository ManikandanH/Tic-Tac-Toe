{"version":3,"sources":["constants/index.ts","components/controls/index.tsx","components/game-grid/index.tsx","components/error/index.tsx","utils/index.ts","components/player-controls/index.tsx","components/main-app/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["gridInitialState","Array","fill","Button","styled","button","props","isSelected","Controls","buttonData","isPlayerHandler","map","btns","index","onClick","opponentType","buttonText","GridContainer","div","rows","cols","Cell","win","CellContents","content","GameGrid","grid","handleGrid","isGameComplete","i","j","x","y","ErrorContainer","ErrorComponent","errorMessage","PlayerControlsContainer","PlayerControlsButtonContainer","PlayerControlsInput","input","id","PlayerControls","playerNamesCallback","useState","player1Name","setPlayer1Name","player2Name","setPlayer2Name","isConfirmed","setIsConfirmed","handleChange","e","type","target","value","useEffect","placeholder","disabled","onChange","Container","GameContainer","GameResetButton","GameExitButton","MainApp","initialButtonState","setButtonData","setGrid","isGameStarted","setIsGameStarted","currentPlay","setCurrentPlay","isPlayer","setIsPlayer","setIsGameComplete","opponent","prevState","entryPoints","cloneGrid","currentPlayer","gridRowIndex","gridColIndex","gridRow","gridCol","gridDiagnal","gridRowCheck","filter","length","gridColCheck","isWin","isRow","isCol","checkGameWinnerInGrid","_","checkGameWinnerForPlayers","toast","success","dismiss","closeOnClick","position","autoClose","pauseOnFocusLoss","Main","main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.85880cbf.chunk.js","sourcesContent":["export const ROWS = 3;\nexport const COLS = 3;\nexport const gridInitialState = new Array(COLS).fill(new Array(ROWS).fill(false));\nexport const PLAYER1 = 'Player 1';\nexport const PLAYER2 = 'Player 2';\nexport const COMPUTER = 'Computer is playing!';\n","import { ReactElement } from 'react';\nimport styled from '@emotion/styled';\n\nimport { Opponent } from '../../types';\n\nimport { ButtonData } from '../main-app';\n\nexport interface ButtonProps {\n\tbuttonText: string;\n\tisSelected: boolean;\n}\n\nexport interface ControlsProps {\n\tbuttonData: Array<ButtonData>;\n\tisPlayerHandler: (opponent: Opponent) => void;\n}\n\nconst Button = styled.button`\n\tbackground-color: ${(props: ButtonProps) => (props.isSelected ? 'black' : 'transparent')};\n\tcolor: ${(props: ButtonProps) => (props.isSelected ? 'white' : 'black')};\n\twidth: 120px;\n\theight: 30px;\n\toutline: none;\n\tmargin: 10px;\n\tborder-color: black;\n\tborder-bottom: ${(props: ButtonProps) =>\n\t\tprops.isSelected ? '3px solid black' : '3px solid #ff3535'};\n\tborder-right: ${(props: ButtonProps) =>\n\t\tprops.isSelected ? '3px solid black' : '3px solid #ff3535'};\n\tborder-left: ${(props: ButtonProps) =>\n\t\tprops.isSelected ? '3px solid #ff3535' : '3px solid black'};\n\tborder-top: ${(props: ButtonProps) =>\n\t\tprops.isSelected ? '3px solid #ff3535' : '3px solid black'};\n\n\t&:hover {\n\t\twidth: 130px;\n\t\theight: 35px;\n\t\tborder-top: 3px solid #ff3535;\n\t\tborder-left: 3px solid #ff3535;\n\t\tborder-bottom: 3px solid black;\n\t\tborder-right: 3px solid black;\n\t}\n`;\n\nexport function Controls({ buttonData, isPlayerHandler }: ControlsProps): ReactElement {\n\treturn (\n\t\t<>\n\t\t\t{buttonData.map((btns, index) => (\n\t\t\t\t<Button key={index} onClick={() => isPlayerHandler(btns.opponentType)} {...btns}>\n\t\t\t\t\t{btns.buttonText}\n\t\t\t\t</Button>\n\t\t\t))}\n\t\t</>\n\t);\n}\n","import { ReactElement } from 'react';\nimport styled from '@emotion/styled';\n\nimport { Entry } from '../main-app';\nimport { Grid } from '../../types';\n\nconst GridContainer = styled.div`\n\tdisplay: grid;\n\tjustify-content: center;\n\tgrid-template-rows: repeat(${(props: GridContainerProps) => props.rows}, 50px);\n\tgrid-template-columns: repeat(${(props: GridContainerProps) => props.cols}, 50px);\n`;\n\nconst Cell = styled.div`\n\tborder: 3px solid black;\n\tmargin-left: -3px;\n\tmargin-top: -3px;\n    filter: ${(props: CellProps) => (!props.win ? 'none' : 'blur(5px)')};\n}\n`;\n\nconst CellContents = styled.div`\n\tfont-size: 35px;\n\tfont-weight: bold;\n\tcolor: ${(props: { content: string | boolean }) =>\n\t\tprops.content && props.content === 'X' ? 'crimson' : ''};\n`;\n\nexport interface CellProps {\n\twin: boolean;\n}\n\nexport interface GridContainerProps {\n\trows: number;\n\tcols: number;\n}\nexport interface GameGridProps {\n\trows: number;\n\tcols: number;\n\tgrid?: Grid;\n\thandleGrid?: (entryPoints: Entry) => void;\n\tisGameComplete: boolean;\n}\n\nexport function GameGrid({\n\trows,\n\tcols,\n\tgrid,\n\thandleGrid,\n\tisGameComplete,\n}: GameGridProps): ReactElement {\n\treturn (\n\t\t<GridContainer rows={rows} cols={cols}>\n\t\t\t{grid &&\n\t\t\t\tgrid.map((rows, i) =>\n\t\t\t\t\trows.map((cols, j) => (\n\t\t\t\t\t\t<Cell\n\t\t\t\t\t\t\twin={isGameComplete && !cols}\n\t\t\t\t\t\t\tkey={i + 'row' + j + 'col'}\n\t\t\t\t\t\t\tonClick={() => handleGrid && handleGrid({ x: i, y: j })}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{cols ? <CellContents content={cols}>{cols}</CellContents> : null}\n\t\t\t\t\t\t</Cell>\n\t\t\t\t\t))\n\t\t\t\t)}\n\t\t</GridContainer>\n\t);\n}\n","import { ReactElement } from 'react';\nimport styled from '@emotion/styled';\n\nconst ErrorContainer = styled.div``;\n\nexport interface ErrorComponentProps {\n\terrorMessage: string;\n}\n\nexport function ErrorComponent({ errorMessage }: ErrorComponentProps): ReactElement {\n\treturn <ErrorContainer>{errorMessage}</ErrorContainer>;\n}\n","import { PlayType, Grid } from '../types';\n\nconst checkGameWinnerInGrid = (\n\tcurrentPlayer: PlayType,\n\tgridRow: Array<any>,\n\tgridCol: Array<any>,\n\tgridDiagnal?: Array<any>\n): {\n\tisWin: boolean;\n\tisRow: boolean;\n\tisCol: boolean;\n} => {\n\tif (!gridDiagnal) {\n\t\tconst gridRowCheck = gridRow.filter((rows) => rows !== currentPlayer).length === 0;\n\t\tconst gridColCheck = gridCol.filter((cols) => cols !== currentPlayer).length === 0;\n\n\t\tif (gridRowCheck) {\n\t\t\treturn {\n\t\t\t\tisWin: true,\n\t\t\t\tisRow: true,\n\t\t\t\tisCol: false,\n\t\t\t};\n\t\t} else if (gridColCheck) {\n\t\t\treturn {\n\t\t\t\tisWin: true,\n\t\t\t\tisRow: false,\n\t\t\t\tisCol: true,\n\t\t\t};\n\t\t}\n\t}\n\n\treturn {\n\t\tisWin: false,\n\t\tisRow: false,\n\t\tisCol: false,\n\t};\n};\n\nexport const checkGameWinnerForPlayers = (\n\tcurrentPlayer: PlayType,\n\tgrid: Grid,\n\tgridRowIndex: number,\n\tgridColIndex: number\n): {\n\tisWin: boolean;\n\tisRow: boolean;\n\tisCol: boolean;\n\tindex: number | null;\n} => {\n\tconst { isWin, isRow, isCol } = checkGameWinnerInGrid(\n\t\tcurrentPlayer,\n\t\tgrid[gridRowIndex],\n\t\tgrid.map((rows, index) => rows.filter((_, index) => index === gridColIndex)[0])\n\t);\n\tif (isWin) {\n\t\treturn {\n\t\t\tisWin,\n\t\t\tisRow,\n\t\t\tisCol,\n\t\t\tindex: isRow ? gridRowIndex : gridColIndex,\n\t\t};\n\t}\n\n\treturn {\n\t\tisWin: false,\n\t\tisRow: false,\n\t\tisCol: false,\n\t\tindex: null,\n\t};\n};\n","import { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\n\nconst PlayerControlsContainer = styled.div`\n\ttext-align: center;\n`;\n\nconst PlayerControlsButtonContainer = styled.div`\n\tdisplay: flex;\n\tgap: 10px;\n\tjustify-content: center;\n\tmargin: 20px;\n`;\n\nconst PlayerControlsInput = styled.input`\n\tdisplay: block;\n\tmargin: 10px auto;\n\tborder: ${(props) => (props.id === 'player1' ? '2px solid crimson' : '2px solid black')};\n\tcolor: ${(props) => (props.id === 'player1' ? 'crimson' : 'black')};\n\theight: 20px;\n\tborder-radius: 2px;\n`;\n\nexport function PlayerControls({\n\tplayerNamesCallback,\n}: {\n\tplayerNamesCallback: (player1Name: string, player2Name: string) => void;\n}) {\n\tconst [player1Name, setPlayer1Name] = useState<string>('');\n\tconst [player2Name, setPlayer2Name] = useState<string>('');\n\tconst [isConfirmed, setIsConfirmed] = useState<boolean>(false);\n\n\tconst handleChange = (e: any, type: string): void => {\n\t\tif (type === 'player1') {\n\t\t\tsetPlayer1Name(e.target.value);\n\t\t} else {\n\t\t\tsetPlayer2Name(e.target.value);\n\t\t}\n\t};\n\n\tuseEffect(() => {\n\t\tplayerNamesCallback(player1Name, player2Name);\n\t}, [player2Name, player1Name, playerNamesCallback]);\n\n\treturn (\n\t\t<PlayerControlsContainer>\n\t\t\t<PlayerControlsInput\n\t\t\t\tid=\"player1\"\n\t\t\t\tplaceholder=\"Player 1 Name\"\n\t\t\t\tvalue={player1Name}\n\t\t\t\tdisabled={isConfirmed}\n\t\t\t\tonChange={(e) => handleChange(e, 'player1')}\n\t\t\t/>\n\t\t\t<PlayerControlsInput\n\t\t\t\tid=\"player2\"\n\t\t\t\tplaceholder=\"Player 2 Name\"\n\t\t\t\tvalue={player2Name}\n\t\t\t\tdisabled={isConfirmed}\n\t\t\t\tonChange={(e) => handleChange(e, 'player2')}\n\t\t\t/>\n\t\t\t<PlayerControlsButtonContainer>\n\t\t\t\t<button onClick={() => setIsConfirmed(true)} disabled={isConfirmed}>\n\t\t\t\t\tConfirm\n\t\t\t\t</button>\n\t\t\t\t<button onClick={() => setIsConfirmed(false)} disabled={!isConfirmed}>\n\t\t\t\t\tEdit\n\t\t\t\t</button>\n\t\t\t</PlayerControlsButtonContainer>\n\t\t</PlayerControlsContainer>\n\t);\n}\n","import { Fragment, ReactElement, useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Grid, Opponent, PlayType } from '../../types';\nimport { gridInitialState, ROWS, COLS } from '../../constants';\n\nimport { Controls } from '../controls';\nimport { GameGrid } from '../game-grid';\nimport { ErrorComponent } from '../error';\nimport { checkGameWinnerForPlayers } from '../../utils';\nimport { PlayerControls } from '../player-controls';\n\nconst Container = styled.div`\n\ttext-align: center;\n`;\n\nconst GameContainer = styled.div`\n\tpadding: 1rem 0;\n`;\n\nconst GameResetButton = styled.button`\n\tbackground-color: transparent;\n\tcolor: black;\n\twidth: 120px;\n\theight: 30px;\n\toutline: none;\n\tmargin: 10px;\n\tborder-color: black;\n\tborder-bottom: 3px solid #ff3535;\n\tborder-right: 3px solid black;\n\tborder-left: 3px solid black;\n\tborder-top: 3px solid #ff3535;\n\n\t&:hover {\n\t\twidth: 130px;\n\t\theight: 35px;\n\t\tborder-top: 3px solid black;\n\t\tborder-left: 3px solid #ff3535;\n\t\tborder-bottom: 3px solid black;\n\t\tborder-right: 3px solid #ff3535;\n\t}\n`;\n\nconst GameExitButton = styled.button`\n\tbackground-color: transparent;\n\tcolor: black;\n\twidth: 120px;\n\theight: 30px;\n\toutline: none;\n\tmargin: 10px;\n\tborder-color: black;\n\tborder-bottom: 3px solid #ff3535;\n\tborder-right: 3px solid black;\n\tborder-left: 3px solid black;\n\tborder-top: 3px solid #ff3535;\n\n\t&:hover {\n\t\twidth: 130px;\n\t\theight: 35px;\n\t\tborder-top: 3px solid black;\n\t\tborder-left: 3px solid #ff3535;\n\t\tborder-bottom: 3px solid black;\n\t\tborder-right: 3px solid #ff3535;\n\t}\n`;\n\nexport interface Entry {\n\tx: number;\n\ty: number;\n}\n\nexport interface ButtonData {\n\tbuttonText: string;\n\tisSelected: boolean;\n\topponentType: Opponent;\n\tdisabled: boolean;\n}\n\nexport function MainApp(): ReactElement {\n\tconst initialButtonState: ButtonData[] = [\n\t\t{\n\t\t\tbuttonText: 'vs Player',\n\t\t\tisSelected: false,\n\t\t\topponentType: 'player',\n\t\t\tdisabled: false,\n\t\t},\n\t\t{\n\t\t\tbuttonText: 'vs Computer',\n\t\t\tisSelected: false,\n\t\t\topponentType: 'computer',\n\t\t\tdisabled: false,\n\t\t},\n\t];\n\tconst [buttonData, setButtonData] = useState<ButtonData[]>(initialButtonState);\n\tconst [grid, setGrid] = useState<Grid>([]);\n\tconst [isGameStarted, setIsGameStarted] = useState(false);\n\tconst [currentPlay, setCurrentPlay] = useState<PlayType>('X');\n\tconst [isPlayer, setIsPlayer] = useState<boolean | null>(null);\n\tconst [isGameComplete, setIsGameComplete] = useState<boolean>(false);\n\tconst [player1Name, setPlayer1Name] = useState<string>();\n\tconst [player2Name, setPlayer2Name] = useState<string>();\n\n\tuseEffect(() => {\n\t\tsetGrid(gridInitialState);\n\t}, []);\n\n\tconst handlePlayersNameCallback = (player1Name: string, player2Name: string) => {\n\t\tsetPlayer1Name(player1Name);\n\t\tsetPlayer2Name(player2Name);\n\t};\n\n\tconst isPlayerHandler = (opponent: Opponent): void => {\n\t\tsetIsPlayer(() => (opponent === 'player' ? true : false));\n\t\tsetButtonData((prevState) => {\n\t\t\treturn prevState.map((btns) =>\n\t\t\t\tbtns.opponentType === opponent\n\t\t\t\t\t? { ...btns, isSelected: !btns.isSelected, disabled: !btns.disabled }\n\t\t\t\t\t: { ...btns, disabled: !btns.disabled }\n\t\t\t);\n\t\t});\n\t\tsetIsGameStarted(!isGameStarted);\n\t\tsetCurrentPlay('X');\n\t};\n\n\tconst handleGrid = (entryPoints: Entry): void => {\n\t\tif (!grid[entryPoints.x][entryPoints.y] && !isGameComplete) {\n\t\t\tconst cloneGrid = [...grid].map((rows, i) =>\n\t\t\t\trows.map((cols, j) => {\n\t\t\t\t\tif (i === entryPoints.x && j === entryPoints.y) {\n\t\t\t\t\t\treturn currentPlay;\n\t\t\t\t\t}\n\t\t\t\t\treturn cols;\n\t\t\t\t})\n\t\t\t);\n\n\t\t\tif (isPlayer) {\n\t\t\t\tconst { isCol, isRow, isWin, index } = checkGameWinnerForPlayers(\n\t\t\t\t\tcurrentPlay,\n\t\t\t\t\tcloneGrid,\n\t\t\t\t\tentryPoints.x,\n\t\t\t\t\tentryPoints.y\n\t\t\t\t);\n\t\t\t\tif (isWin) {\n\t\t\t\t\tsetGrid((prevState) =>\n\t\t\t\t\t\tprevState.map((rows, i) =>\n\t\t\t\t\t\t\trows.map((cols, j) => {\n\t\t\t\t\t\t\t\tif (isRow && i === index) {\n\t\t\t\t\t\t\t\t\treturn currentPlay;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (isCol && j === index) {\n\t\t\t\t\t\t\t\t\t\treturn currentPlay;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\ttoast.success(\n\t\t\t\t\t\tcurrentPlay === 'X'\n\t\t\t\t\t\t\t? `${player1Name} won the match`\n\t\t\t\t\t\t\t: `${player2Name} won the match`\n\t\t\t\t\t);\n\t\t\t\t\tsetIsGameComplete(true);\n\t\t\t\t} else {\n\t\t\t\t\tsetGrid(cloneGrid);\n\t\t\t\t\tsetCurrentPlay((prevState) => (prevState === 'O' ? 'X' : 'O'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst handleReset = () => {\n\t\ttoast.dismiss();\n\t\tsetCurrentPlay('X');\n\t\tsetGrid(gridInitialState);\n\t\tsetIsGameComplete(false);\n\t};\n\n\tconst handleExit = () => {\n\t\ttoast.dismiss();\n\t\tsetCurrentPlay('X');\n\t\tsetIsGameStarted(false);\n\t\tsetIsPlayer(false);\n\t\tsetPlayer2Name('');\n\t\tsetPlayer1Name('');\n\t\tsetButtonData(initialButtonState);\n\t\tsetGrid(gridInitialState);\n\t\tsetIsGameComplete(false);\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<Controls buttonData={buttonData} isPlayerHandler={isPlayerHandler} />\n\t\t\t{isGameStarted && (\n\t\t\t\t<GameContainer>\n\t\t\t\t\t{isPlayer ? (\n\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t<PlayerControls playerNamesCallback={handlePlayersNameCallback} />\n\t\t\t\t\t\t\t<GameGrid\n\t\t\t\t\t\t\t\tisGameComplete={isGameComplete}\n\t\t\t\t\t\t\t\thandleGrid={handleGrid}\n\t\t\t\t\t\t\t\tgrid={grid}\n\t\t\t\t\t\t\t\trows={ROWS}\n\t\t\t\t\t\t\t\tcols={COLS}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<ErrorComponent errorMessage=\"Feature Not developed Yet\" />\n\t\t\t\t\t)}\n\t\t\t\t\t{isPlayer && (\n\t\t\t\t\t\t<GameResetButton onClick={handleReset}>Reset Game</GameResetButton>\n\t\t\t\t\t)}\n\t\t\t\t\t<GameExitButton onClick={handleExit}>Exit</GameExitButton>\n\t\t\t\t</GameContainer>\n\t\t\t)}\n\t\t\t<ToastContainer\n\t\t\t\tcloseOnClick\n\t\t\t\tposition=\"bottom-center\"\n\t\t\t\tautoClose={false}\n\t\t\t\tpauseOnFocusLoss={false}\n\t\t\t/>\n\t\t</Container>\n\t);\n}\n","import { ReactElement } from 'react';\nimport styled from '@emotion/styled';\n\nimport { MainApp } from './components/main-app';\n\nconst Main = styled.main`\n\ttext-align: center;\n`;\n\nfunction App(): ReactElement {\n\treturn (\n\t\t<Main>\n\t\t\t<h1>Tic Tac Toe</h1>\n\t\t\t<MainApp />\n\t\t</Main>\n\t);\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}